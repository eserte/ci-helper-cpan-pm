#!/usr/bin/env perl

use strict;
use warnings;
use Cwd qw(getcwd);
use File::Path qw(mkpath);
use FindBin;
use ExtUtils::MakeMaker ();
use Getopt::Long;

my $home_dir = $ENV{HOME};
my $sysdeps_clone_url = 'https://github.com/eserte/cpan-plugin-sysdeps';
my $with_sudo = $> != 0;
my $run_tests = 1;
my @urllist;
my @default_urllist = qw(http://cpan.metacpan.org/ http://cpan.cpantesters.org/ http://cpan.develooper.com/ ftp://ftp.funet.fi/pub/CPAN);
my $yaml_module = 'YAML';

sub usage () {
    die <<EOF;
usage: $0 [--no-sudo] [--no-test] [--home-dir=directory] [--dry-run] [--distroprefs=git-clone-url] [--enable-sysdeps] [--sysdeps-branch ...] [--yaml-module ...] [--mirrorurl=url ...] [--debug]
EOF
}

GetOptions
    (
     'home-dir=s'     =>    \$home_dir,
     'dry-run'        => \my $dry_run,
     'distroprefs=s'  => \my $distro_prefs_clone_url,
     'enable-sysdeps' => \my $enable_sysdeps,
     'sysdeps-branch=s'=>\my $sysdeps_branch,
     'sudo!'          =>    \$with_sudo,
     'test!'          =>    \$run_tests,
     'mirrorurl=s@'   =>    \@urllist,
     'debug!'         => \my $debug,
     'yaml-module=s'  =>    \$yaml_module,
    ) or usage;

sub create_dir ($) {
    my $dir = shift;
    if (!-d $dir) {
	print STDERR "Create $dir... ";
	mkpath $dir if !$dry_run;
	print STDERR "done.\n";
    }
}

sub git_clone ($$;@) {
    my($clone_url, $clone_dest, %opts) = @_;
    my $branch = delete $opts{branch};
    die "Unhandled options: " . join(" ", %opts) if %opts;

    my @cmd = ('git', 'clone', '--quiet', (defined $branch ? ('-b', $branch) : ()), $clone_url, $clone_dest);
    print STDERR "@cmd... \n";
    if (!$dry_run) {
	system @cmd;
	die "Cloning $clone_url to $clone_dest failed" if $? != 0;
    }
    print STDERR "done.\n";
}

sub cpan_mod_install (@) {
    my(@cpan_mods) = @_;
    if (@cpan_mods) {
	print STDERR ($run_tests ? "Test and install" : "Install") . " @cpan_mods... ";
	if (!$dry_run) {
	    system 'cpan', (!$run_tests ? '-T' : ()), @cpan_mods;
	}
    }
    print STDERR "done.\n";
}

if (!@urllist) {
    @urllist = @default_urllist;
}
my $urllist_formatted = join(", ", map { "q[$_]" } @urllist);

my @plugin_list;
if ($enable_sysdeps) {
    push @plugin_list, q[CPAN::Plugin::Sysdeps=batch];
}
my $plugin_list_formatted = join(", ", map { "q[$_]" } @plugin_list);

my $sudo_formatted = $with_sudo ? 'sudo ' : '';

my $cpan_pm_version = do {
    my $cpan_pm_path = module_path("CPAN");
    die "Unexpected: cannot find path to CPAN.pm. Current \@INC is: @INC" if !$cpan_pm_path;
    MM->parse_version($cpan_pm_path);
};

my $CPAN_dir = "$home_dir/.cpan/CPAN";
create_dir $CPAN_dir;

my $MyConfig_file = "$CPAN_dir/MyConfig.pm";
if (!-e $MyConfig_file) {
    print STDERR "Create $MyConfig_file... ";
    open my $fh, '<', "$FindBin::RealBin/.cpan/CPAN/MyConfig.pm.tpl"
	or die "Can't read MyConfig.pm.tpl: $!";
    my $ofh;
    if ($dry_run) {
	open $ofh, '>&', \*STDERR
	    or die $!;
    } else {
	open $ofh, '>', $MyConfig_file
	    or die "Can't write to $MyConfig_file: $!";
    }
    while(<$fh>) {
	s{^#\@CPANVER(.*?)\@(.*)}{
	    if (eval qq{$cpan_pm_version $1}) {
		$2;
	    } else {
		if ($@) {
		    die "Problem in line $_: $@";
		} else {
		    "";
		}
	    }
	}ge;
	s{\@HOME\@}{$home_dir}g;
	s{\@SUDO_\@}{$sudo_formatted}g;
	s{\@URLLIST\@}{$urllist_formatted}g;
	s{\@PLUGIN_LIST\@}{$plugin_list_formatted}g;
	s{\@YAML_MODULE\@}{$yaml_module}g;
	print $ofh $_;
    }
    close $ofh
	or die "Error while closing: $!";
    print STDERR "done.\n";

    if ($debug) {
	open my $fh, '<', $MyConfig_file
	    or die "Unexpected error: can't open $MyConfig_file: $!";
	warn "Contents of $MyConfig_file:\n";
	local $/;
	warn scalar <$fh>;
    }
}

if ($distro_prefs_clone_url) {
    git_clone $distro_prefs_clone_url, "$home_dir/.cpan/prefs";
}

if ($enable_sysdeps) {
    create_dir "$home_dir/src";
    git_clone $sysdeps_clone_url, "$home_dir/src/cpan-plugin-sysdeps", branch => $sysdeps_branch;
    my $cwd = getcwd;
    chdir "$home_dir/src/cpan-plugin-sysdeps"
	or die "Can't chdir to $home_dir/src/cpan-plugin-sysdeps: $!";
    print STDERR "Install cpan-plugin-sysdeps... ";
    if (!$dry_run) {
	system $^X, 'Makefile.PL';
	die "Makefile.PL failed" if $? != 0;
	system 'make', 'all', ($run_tests ? 'test' : ());
	die "build/test failed" if $? != 0;
	{
	    my @cmd = qw(make install);
	    if ($with_sudo) {
		unshift @cmd, 'sudo';
	    }
	    system @cmd;
	    die "'@cmd' failed" if $? != 0;
	}
    }
    print STDERR "done.\n";
    chdir $cwd
	or die $!;

    # CPAN.pm 2.07 is the first one with plugin support
    if (!eval { require CPAN; CPAN->VERSION("2.07") }) {
	print STDERR "Need to upgrade CPAN.pm...\n"; 
	cpan_mod_install 'CPAN';
    }
}

if (!eval qq{ require $yaml_module; 1 }) {
    cpan_mod_install $yaml_module;
}
# XXX install also other modules? Expect?

# REPO BEGIN
# REPO NAME module_path /Users/eserte/src/srezic-repository 
# REPO MD5 ac5f3ce48a524d09d92085d12ae26e8c

sub module_path {
    my($filename) = @_;
    $filename =~ s{::}{/}g;
    $filename .= ".pm";
    foreach my $prefix (@INC) {
	my $realfilename = "$prefix/$filename";
	if (-r $realfilename) {
	    return $realfilename;
	}
    }
    return undef;
}
# REPO END

